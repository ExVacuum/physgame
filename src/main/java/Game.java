/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.ArrayList;

public class Game extends JFrame {

    public static Game game = null;

    public ArrayList<MButton> buttons =  new ArrayList<MButton>();
    public Input input;
    public Insets insets;
    boolean success;


    // Fonts
    Font  h1  = new Font(Font.SERIF, Font.PLAIN,  32);
    Font  h2  = new Font(Font.SERIF, Font.PLAIN,  24);
    Font def = new Font(Font.SANS_SERIF, Font.PLAIN,  14);

    // Colors
    Color transBlack = new Color(0,0,0, 0.5f);
    Color notBlack = new Color(5,5,5);
    Color notWhite = new Color(200,200,200);

    // Strokes
    BasicStroke defaultStroke = new BasicStroke(1);
    BasicStroke medStroke = new BasicStroke(3);
    BasicStroke heavyStroke = new BasicStroke(10);


    //Images
    BufferedImage iconImage, slimeImage, boogalooImage, serpentImage, enemyImage;

    {
        try {
            iconImage = ImageIO.read(Game.class.getClassLoader().getResourceAsStream("dragonicon.png"));
            slimeImage = ImageIO.read(Game.class.getClassLoader().getResourceAsStream("slime.png"));
            boogalooImage = ImageIO.read(Game.class.getClassLoader().getResourceAsStream("boogaloo.png"));
            serpentImage = ImageIO.read(Game.class.getClassLoader().getResourceAsStream("serpent.png"));
        }catch (IOException e){
            e.printStackTrace();
        }
    }

    //Graphics panel
    MPanel gPane = null;

    //Game Stage
    public Stage currentStage;
    public Stage previousStage;
    public enum Stage{
        MENU, TUT, LVL1, LVL2, BOSS
    }

    //Game Phase
    public Phase currentPhase = Phase.INTRO;
    public Phase previousPhase;
    public enum Phase{
        INTRO, PLAYERTURN, ANSWERING, RESULT, ENEMYTURN, END
    }

    //Attack Types
    public AttackType playerAttackType;
    public AttackType enemyWeakness;
    public enum AttackType{
        DYNAMICS,ENERGY,FIELDS,WAVE,COMPUTER
    }

    //Player Vars
    int hP;
    int mHP;

    //Enemy Vars
    int enemyHP;
    int enemyMHP;
    String enemyName;

    //Questions
    String[][] questions = new String[][]{
        //Question Number/Unit, Dynamics,                                                                                               Energy,                                                      Fields,                                                                 Wave,                                                                                 Computers
        /*1*/                  {"Which defines uniform motion?"                                                                       , "What is the most likely type of energy to be\n" +
                                                                                                                                        "converted from kinetic energy due to friction?"            , "The law of electric charges states..."                              , "Which type of electromagnetic radiation travels faster: visible light or x-rays?"  , "What is the fundamental unit of information in\n" +
                                                                                                                                                                                                                                                                                                                                                                   "classical computers?"       },

        /*2*/                  {"If you were to run towards the back of a bullet train\n" +
                                "at 10.0 km/h relative to the train,\n" +
                                "while the train travels east at 320 km/h,\n" +
                                "what would your velocity relative to the rails be?"                                                  , "Which of the following scenarios exhibit a\n" +
                                                                                                                                        "conversion from gravitational potential energy\n" +
                                                                                                                                        "into kinetic energy?"                                      , "A pair of point charges of 6.0 × 10^-6 C\n" +
                                                                                                                                                                                                      "and 1.0 × 10^-6 C, are separated 15cm. What is the\n" +
                                                                                                                                                                                                      "electrostatic force between them?"                                  , "Waves transfer which of the following?"                                            , "Which is NOT a viable application for quantum computers\n" +
                                                                                                                                                                                                                                                                                                                                                                   "in their current state?"        },

        /*3*/                  {"If a 30N force is applied easterly on a resting 5kg\nmass for 5 seconds, what would the final\n" +
                                "speed of the mass be?"                                                                              , "In a perfectly elastic collision..."                        ,"What is the gravitational field intensity 30,000km from\n" +
                                                                                                                                                                                                     "the center of the Earth, if the Earth weighs 5.972 × 10^24 kg."     , "What is the frequency of red light,\n" +
                                                                                                                                                                                                                                                                            "which has a wavelength of 680 nanometers?"                                          , "A major hurdle for quantum computing, the phenomenon by which\n" +
                                                                                                                                                                                                                                                                                                                                                                   "qubits unwantedley lose their quantum behaviour:"        },

        /*4*/                  {"What is the acceleration due to gravity on a 2kg\n" +
                                "squash in free fall?"                                                                               , "By the time an inelastic collision is completed,\n" +
                                                                                                                                       "the total kinetic energy of the system will have..."        ,"Which is true about gravitational field intensity as the\n" +
                                                                                                                                                                                                     "distance from the center of the mass increases?"                     , "A supertrough can only occur during..."                                            , "A phenomenon which allows objects to exist in multiple states\n" +
                                                                                                                                                                                                                                                                                                                                                                   "simultaneously:"        },

        /*5*/                  {"By what factor will the centripetal acceleration\n" +
                                "increase if the velocity of rotation is doubled?"                                                     ,"Which is the SI unit for energy?"                          ,"Which force is the strongest?"                                       , "What happens to the amount of diffraction\n" +
                                                                                                                                                                                                                                                                             "that occurs when a slit is widened?"                                               , "Number of values that can be held by a combo of 4 bits at once:"        }
    };

    //Answers
    String[][][] answers = new String[][][]{
        //Question Number/Unit, Dynamics,                                                                            Energy,                                                                                            Fields,                                                                                                   Wave,                                                                                 Computers
        /*1*/                  {{"Constant acceleration","Constant velocity","Constant displacement","No Movement"}, {"Heat","Light","Sound","Chemical"},                                                               {"Like charges attract while opposites repel","k = 8.988×10^9","Likes repel, opposites attract","V=IR"}, {"Visible Light","The bottom left option","Neither","X-Rays"},                        {"Byte","Qubit","Bit","Qubyte"}},
        /*2*/                  {{"330km/h[E]","-320km/h[E]","310km/h[E]","310km/h[W]"},                              {"Ball placed on table","Ball bouncing","Ball rolls off table","Ball resting"},                    {"2.4N","4.0N","12.3N","0.5N"},                                                                          {"Energy","Liquids","Gases","Solids"},                                                {"Prime factorization","Database Searching","Quantum Simulations","\"Fester's Quest\" emulation"}},
        /*3*/                  {{"20m/s[E]","15.0m/s[E]","20m/s[W]","5m/s[E]"},                                      {"Kinetic energy is lost","Energy is converted","Are usually large","Kinetic energy is not lost"}, {"9.275 x 10^4 N","4.425 x 10^5 N/kg","4.43 x 10^5 N/kg","12.425 x 10^5 N/kg"},                          {"4.40 x 10^8 Hz","4.8 Hz","4.40 x 10^8 MHz","1280 Hz"},                              {"Decoherence","Entanglement","Corruption","Packet Loss"}},
        /*4*/                  {{"9.81m/s^2[Down]","19.62m/s^2[Down]","2m/s^2[Down]","19.62m/s[Down]"},              {"Increased","Decreased","Remained constant","Don't pick this one"},                               {"It decreases","It increases","It remains constant","Yes"},                                             {"Destructive interference","Nodes","Constructive interference","Nuclear Holocaust"}, {"Incoherence","Superposition","Entanglement","Hyperwarp"}},
        /*5*/                  {{"2","4","8","0.5"},                                                                 {"Watt","Joule","Newton Meter","Brobdingnag"},                                                     {"Electric","Gravitational","Magnetic","Bioluminescent"},                                                {"It remains constant","It increases","It decreases","Spaghetti and Meatballs"},      {"3476298452846975348534695823","16","1","4"}}
    };

    boolean[][][] answerTruths = new boolean[][][]{
        //Question Number/Unit, Dynamics,                  Energy,                       Fields,                    Wave,                     Computers
            /*1*/                  {{false,true,false,false}, {true,false,false,false}, {false,false,true,false}, {false,true,true,false},  {false,false,true,false}},
            /*2*/                  {{false,false,true,false}, {false,false,true,false}, {true,false,false,false}, {true,false,false,false}, {false,false,false,true}},
            /*3*/                  {{true,false,false,false}, {false,false,false,true}, {false,true,false,false}, {false,false,true,false}, {true,false,false,false}},
            /*4*/                  {{false,true,false,false}, {false,true,false,false}, {true,false,false,false}, {false,false,true,false}, {false,true,false,false}},
            /*5*/                  {{false,true,false,false}, {false,true,false,false}, {false,true,false,false}, {false,false,true,false}, {false,false,true,false}},
    };

    int category, questionNumber;

    public static void main(String[] args) {
        new Game();
    }

    public Game(){
        init();
        while (true){
            step();
            gPane.repaint();
        }
    }

    void init(){
        game = this;
        input = new Input();
        setVisible(false);
        setTitle("Visually Putrid SPH4U Review Game - Silas Bartha");
        setIconImage(iconImage);
        setSize(640,480);
        setResizable(false);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        gPane = new MPanel();
        add(gPane);
        setVisible(true);
        insets = getInsets();
        setCurrentStage(Stage.MENU);
        hP = 100;
        mHP = hP;
    }

    void step(){
        input.update();
    }

    void drawStage(Graphics2D g2){
        switch (currentStage){
            case MENU:
                g2.setColor(Color.WHITE);
                g2.setFont(h2);
                g2.drawString("Visually Putrid", getWidth()/2-100, getHeight()/2-100);
                g2.setFont(h1);
                g2.drawString("SPH4U Review Game", getWidth()/2-100, getHeight()/2-50);
                g2.drawImage(iconImage, getWidth()/2-256, getHeight()/2-156, 128,128, null);
                break;
            case LVL1:
            case LVL2:
            case BOSS:
                switch (currentPhase){
                    case INTRO:
                        g2.setFont(h1);
                        g2.setColor(Color.WHITE);
                        g2.drawString(currentStage.toString(), getWidth()/2-60, getHeight()/2-50);
                        break;
                    case PLAYERTURN:
                        g2.drawImage(enemyImage,getWidth()/2-128,getHeight()/2-256,256,256, null);
                        g2.setColor(Color.WHITE);
                        g2.setFont(h2);
                        g2.drawString("Player's turn:", 50,50);
                        g2.setFont(def);
                        g2.drawString(enemyName, getWidth()/2-182, getHeight()/2);
                        g2.setColor(Color.RED);
                        g2.fillRect(getWidth()/2-64, getHeight()/2-16, 256, 16);
                        g2.setColor(Color.GREEN);
                        g2.fillRect(getWidth()/2-64,getHeight()/2-16,(int)((enemyHP/(double)enemyMHP)*256),16);
                        break;
                    case ANSWERING:
                        g2.setColor(Color.WHITE);
                        g2.setFont(def);
                        String[] questionLines = questions[questionNumber][category].split("\\n");
                        for(int i = 0; i < questionLines.length; i++) {
                            String line = questionLines[i];
                            g2.drawString(line, getWidth() / 2 - 164, getHeight() / 2 - 128 + 16*i);
                        }
                        break;
                    case RESULT:
                        g2.setColor(Color.WHITE);
                        g2.setFont(h1);
                        g2.drawString(success?"Hit":"Miss",getWidth()/2-50, getHeight()/2);
                        break;
                    case ENEMYTURN:
                        g2.drawImage(enemyImage,getWidth()/2-128,getHeight()/2-256,256,256, null);
                        g2.setColor(Color.WHITE);
                        g2.setFont(h2);
                        g2.drawString(enemyName+" retaliates for "+enemyMHP*0.1+" damage: " + ((hP-enemyMHP*0.1)<=0?"Also you die":""), 50,50);
                        g2.setFont(def);
                        g2.drawString(enemyName, getWidth()/2-164, getHeight()/2);
                        g2.setColor(Color.RED);
                        g2.fillRect(getWidth()/2-64, getHeight()/2-16, 256, 16);
                        g2.setColor(Color.GREEN);
                        g2.fillRect(getWidth()/2-64,getHeight()/2-16,(int)((enemyHP/(double)enemyMHP)*256),16);
                        g2.setColor(Color.WHITE);
                        g2.setFont(h2);
                        g2.drawString("Player", getWidth()/2-256, getHeight()/2);
                        g2.setColor(Color.RED);
                        g2.fillRect(getWidth()/2-128, getHeight()/2+100, 256, 32);
                        g2.setColor(Color.GREEN);
                        g2.fillRect(getWidth()/2-128,getHeight()/2+100,(int)((hP/(double)mHP)*256),32);
                        break;
                    case END:
                        g2.setColor(Color.WHITE);
                        g2.setFont(h1);
                        g2.drawString("Defeated "+ enemyName, getWidth()/2-128, getHeight()/2);
                }
                break;
        }

        for (int i = 0; i < buttons.size(); i++){
            MButton button = buttons.get(i);
            button.draw(g2);
        }
    }

    void refreshGUI(){
        buttons.clear();
        switch (currentStage){
            case MENU:
                buttons.add(new MButton(getWidth()/2-75,230,150,50){

                    {
                        setText("Play game");
                    }

                    @Override
                    public void performAction(){
                        setCurrentStage(Stage.LVL1);
                        startLevel();
                    }

                });
                buttons.add(new MButton(getWidth()/2-75,290,150,50){

                    {
                        setText("Quit game");
                    }

                    @Override
                    public void performAction(){
                        System.exit(0);
                    }

                });
                break;
            case LVL1:
            case LVL2:
            case BOSS:
                switch (currentPhase){
                    case PLAYERTURN:
                        buttons.add(new MButton(getWidth()/2-205,250,200,50){

                            {
                                setText("Dynamic Attack");
                                setBgC(Color.ORANGE.darker());
                            }

                            @Override
                            public void performAction(){
                                playerAttack(AttackType.DYNAMICS);
                            }

                        });
                        buttons.add(new MButton(getWidth()/2+5,250,200,50){

                            {
                                setText("Energy Attack");
                                setBgC(Color.YELLOW);
                            }

                            @Override
                            public void performAction(){
                                playerAttack(AttackType.ENERGY);
                            }

                        });
                        buttons.add(new MButton(getWidth()/2-205,310,200,50){

                            {
                                setText("Field Attack");
                                setBgC(Color.PINK);
                            }

                            @Override
                            public void performAction(){
                                playerAttack(AttackType.FIELDS);
                            }

                        });
                        buttons.add(new MButton(getWidth()/2+5,310,200,50){

                            {
                                setText("Wave Attack");
                                setBgC(Color.CYAN);
                            }

                            @Override
                            public void performAction(){
                                playerAttack(AttackType.WAVE);
                            }

                        });
                        buttons.add(new MButton(getWidth()/2-205,370,200,50){

                            {
                                setText("Computing Attack");
                                setBgC(Color.GREEN.darker());
                            }

                            @Override
                            public void performAction(){
                                playerAttack(AttackType.COMPUTER);
                            }

                        });
                        buttons.add(new MButton(getWidth()/2+5,370,100,50){

                            {
                                setText("QUIT");
                            }

                            @Override
                            public void performAction(){
                                setCurrentStage(Stage.MENU);
                            }

                        });
                        break;
                    case ANSWERING:
                        buttons.add(new MButton(getWidth()/2-205,250,200,50){

                            {
                                setText(answers[questionNumber][category][0]);
                                setFnt(def);
                            }

                            @Override
                            public void performAction(){
                                testAnswer(0);
                            }

                        });
                        buttons.add(new MButton(getWidth()/2+5,250,200,50){

                            {
                                setText(answers[questionNumber][category][1]);
                                setFnt(def);
                            }

                            @Override
                            public void performAction(){
                                testAnswer(1);
                            }

                        });
                        buttons.add(new MButton(getWidth()/2-205,310,200,50){

                            {
                                setText(answers[questionNumber][category][2]);
                                setFnt(def);
                            }

                            @Override
                            public void performAction(){
                                testAnswer(2);
                            }

                        });
                        buttons.add(new MButton(getWidth()/2+5,310,200,50){

                            {
                                setText(answers[questionNumber][category][3]);
                                setFnt(def);
                            }

                            @Override
                            public void performAction(){
                                testAnswer(3);
                            }

                        });
                        break;
                    case END:
                        buttons.add(new MButton(getWidth()/2-75,290,150,50){

                            {
                                setText(currentStage==Stage.BOSS?"Quit":"Next stage");
                            }

                            @Override
                            public void performAction(){
                                switch (currentStage){
                                    case LVL1:
                                        setCurrentStage(Stage.LVL2);
                                        startLevel();
                                        break;
                                    case LVL2:
                                        setCurrentStage(Stage.BOSS);
                                        startLevel();
                                        break;
                                    case BOSS:
                                        System.exit(0);
                                        break;
                                }
                            }

                        });
                        break;
                }
                break;
            case TUT:
                buttons.add(new MButton(getWidth()/2-75,290,150,50){

                    {
                        setText("Back");
                    }

                    @Override
                    public void performAction(){
                        setCurrentStage(Stage.MENU);
                    }

                });
                break;
        }
    }

    public void playerAttack(AttackType type){
        switch (type){
            case DYNAMICS:
                category = 0;
                break;
            case ENERGY:
                category = 1;
                break;
            case FIELDS:
                category = 2;
                break;
            case WAVE:
                category = 3;
                break;
            case COMPUTER:
                category = 4;
                break;
        }
        questionNumber = (int)(Math.random()*5);
        playerAttackType = type;
        setCurrentPhase(Phase.ANSWERING);
    }

    public void testAnswer(int answerNumber){
        success = false;
        if(answerTruths[questionNumber][category][answerNumber]) {
            success = true;
            if (playerAttackType == enemyWeakness) {
                enemyHP -= 25;
            } else {
                enemyHP -= 10;
            }
        }
        setCurrentPhase(Phase.RESULT);
        if(!success) {
            Timer resultTimer = new Timer(2000, actionEvent -> {
                setCurrentPhase(Phase.ENEMYTURN);
                hP-=enemyMHP*0.1;
                if(hP<=0){
                    Timer enemyDelayTimer = new Timer(2000, actionEvent2 -> {
                        setCurrentStage(Stage.MENU);
                    });
                }
                Timer enemyDelayTimer = new Timer(2000, actionEvent2 -> {
                    setCurrentPhase(Phase.PLAYERTURN);
                });
                enemyDelayTimer.setRepeats(false);
                enemyDelayTimer.start();
            });
            resultTimer.setRepeats(false);
            resultTimer.start();
        }else {
            Timer resultTimer = new Timer(2000, actionEvent -> {
                setCurrentPhase(Phase.PLAYERTURN);

                if(enemyHP<=0){
                    setCurrentPhase(Phase.END);
                    return;
                }
            });
            resultTimer.setRepeats(false);
            resultTimer.start();
        }
    }



    public void setCurrentStage(Stage currentStage) {
        previousStage = this.currentStage;
        this.currentStage = currentStage;
        refreshGUI();
    }

    public void setCurrentPhase(Phase currentPhase){
        previousPhase = this.currentPhase;
        this.currentPhase = currentPhase;
        refreshGUI();
    }

    public void startLevel(){
        setCurrentPhase(Phase.INTRO);
        Timer introTimer = new Timer(2000, actionEvent -> {
            setCurrentPhase(Phase.PLAYERTURN);
            switch (currentStage){
                case LVL1:
                    spawnEnemy(50, "Kinetic Blob", AttackType.DYNAMICS, slimeImage);
                    break;
                case LVL2:
                    spawnEnemy(100, "Electric Boogaloo", AttackType.ENERGY, boogalooImage);
                    break;
                case BOSS:
                    spawnEnemy(200, "Chromatic Serpent", AttackType.WAVE, serpentImage);
                    break;
            }
        });
        introTimer.setRepeats(false);
        introTimer.start();
    }

    public void spawnEnemy(int enemyHP, String enemyName, AttackType enemyWeakness, BufferedImage enemyImage){
        this.enemyHP = enemyHP;
        this.enemyMHP = enemyHP;
        this.enemyName = enemyName;
        this.enemyWeakness = enemyWeakness;
        this.enemyImage = enemyImage;
    }

    /**
     * Custom graphics panel class
     */
    class MPanel extends JPanel{

        //By default, the background of this panel should be slightly lighter than black.
        {
            setBackground(notBlack);
        }

        @Override
        public void paintComponent(Graphics g){

            //Cast graphics to Graphics2D
            Graphics2D g2 = (Graphics2D) g;
            super.paintComponent(g2);

            drawStage(g2);
        }
    }
}
